\documentclass[10pt]{article}
\usepackage[dutch]{babel}
\usepackage{todonotes}
\usepackage{amssymb}
\usepackage{amsmath}
\usepackage[parfill]{parskip}
\usepackage{pgffor}
\usepackage{graphicx}
\usepackage{subcaption}
\usepackage{xltabular}
\usepackage{float}
\usepackage{enumitem}
\usepackage{hyperref}
% \usepackage[margin=4.5cm]{geometry}

\setlist[itemize]{leftmargin=*}
\setlength{\parskip}{1em}

\makeatletter
\renewcommand{\rmdefault}{\sfdefault}
\def\subtitle#1{\gdef\@subtitle{#1}}

\def\leftHeader#1{\listadd\@leftHeader{#1}}
\def\rightHeader#1{\listadd\@rightHeader{#1}}

\def\@maketitle{
\renewcommand{\do}[1]{##1

}
\begin{minipage}[t]{5cm}
\flushleft
\dolistloop{\@leftHeader}
\end{minipage}
\hfill
\begin{minipage}[t]{5cm}
\flushright
\dolistloop{\@rightHeader}
\end{minipage}
\centering

\vspace{7cm}
% \vfill
{\huge\bfseries\@title\par}
\vfill
% \vspace{1cm}
\thispagestyle{empty}
\clearpage
}
\makeatother

\title{Verslag

\Large Project Gedistribueerde Systemen}

\leftHeader{Ward Gauderis}
\leftHeader{20183431}
\rightHeader{Gedistribueerde Systemen}
\rightHeader{Informatica}
\rightHeader{UAntwerpen}
\leftHeader{10/01/2021}

\begin{document}
\maketitle

\vfill
\tableofcontents
\vfill
\clearpage

\section{Praktisch}
De webapplicatie is opgesplitst in verschillende Docker containers die beheerd worden met Docker-Compose. Enkel het docker-compose commando, een draaiende Docker daemon en Docker gebruikersrechten zijn noodzakelijk om het de applicatie op te starten. Hiervoor zijn de scriptjes \textbf{install.sh} en \textbf{run.sh} voorzien.
Binnen de containers zelf worden automatisch de verschillende dependencies geïnstalleerd.

Zowel de API als de bijhorende site zijn beschikbaar op poort 80 van \textbf{localhost}.
De applicatie is geïnitialiseerd met de data die werd voorzien via Blackboard.
Gebruikers van de applicatie vallen in 5 categoriën (combinaties zijn mogelijk) met verschillende rechten. Voor elk van deze gebruikers is er een account aangemaakt waarmee de applicatie kan worden getest:

\begin{xltabular}{\linewidth}{|l|l|l|}
	\hline
	\textbf{Gebruikersrol} & \textbf{Username} & \textbf{Password}\\
	\hline
	Anonieme gebruiker &&\\
	\hline
	Geregistreerde gebruiker & Voetbalfan & Voetbalfan\\
	\hline
	Geregistreerde gebruiker gelinkt aan een team & Voetballer & Voetballer\\
	\hline
	Administator & Admin & Admine\\
	\hline
	Superadministrator & Super & Super\\
	\hline
\end{xltabular}

\section{Tools}

Wat betreft de tools heb ik me gehouden aan de lijst die kwam met de opdracht, met enkele aanpassingen en toevoegingen.\\
In plaats van Bootstrap, gebruik ik Bulma als CSS framework. In het Programming Project Database vorig jaar gebruikten we exact dezelfde technologiën als in dit project en toen hadden we voornamelijk spijt van het feit dat we Bootstrap hadden gebruikt omwille van de verborgen complexiteit die ermee kwam. Bulma is een meer light-weight variant hierop zonder javascript.\\
Eveneens gebruik ik voor de geocoding niet de Google Geocoding API maar Positionstack omdat deze service minder persoonlijke data van mij opvroeg om een gratis account aan te maken.\\
Verder maak ik gebruik van JSON Web Tokens voor de token-based authentication bij de API, van Flask-Login voor de session based authentication bij de website frontend, van WTForms om enkele aspecten van de HTML-forms te vereenvoudigen, van de webserver nginx als reverse proxy die het verkeer tussen de verschillende Docker containers en de gebruiker orkestreert en van Gunicorn als WSGI application server om de communicatie tussen Nginx en Flask te overzien.

\clearpage
\section{Design}
De applicatie heb ik opgesplitst in 6 verschillende containers op basis van functionaliteit die voorzien wordt en de rechten die nodig zijn om deze functionaliteit te mogen gebruiken.\\
Het is altijd mogelijk om de backend (vooral de API bestaande uit \textbf{Stats} en \textbf{CRUD}) verder op te splitsen in meer microservices, maar dit leek me vooral meer werk met zich mee te brengen en niet veel directe voordelen.

\begin{figure}[H]
    \centerline{\includegraphics[width=\linewidth]{diagram}}
\end{figure}

Hier volgt een beschrijving per container:

\subsection{Nginx}
De \textbf{Nginx} container regelt het verkeer tussen de verschillende containers en zorgt ervoor dat de applicatie voor de gebruiker er als één geheel uitziet. De gebruiker heeft enkel toegang tot poort 80 van localhost terwijl alle interne HTTP-verkeer via poorten 5000 gaat. \textbf{Nginx} bepaalt welke requests naar welke microservice moeten worden doorgestuurd. Eveneens worden voor de API requests die authorizatie nodig hebben authorizatierequests gestuurd naar \textbf{Auth} vooraleer deze requests te forwarden.

\subsection{Auth}
De \textbf{Auth} service is een Flask applicatie die instaat voor de token-based authenticatie en de authorizatie van de API. Deze maakt gebruik van JSON web tokens die de gebruiker van de API moet voorzien in de authorizatieheader van zijn request. De service genereert JWT tokens op aanvraag van gebruikers met correcte HTTP basic access authentication.
Daarnaast authorizeert de \textbf{Auth} service ook gebruikers voor toegang tot bepaalde delen van de API door te antwoorden op authorizatierequests van \textbf{Nginx}.

\subsection{Stats}
De \textbf{Stats} service vormt samen met \textbf{CRUD} en \textbf{Auth} de van buitenaf toegankelijke API. Deze Flask applicatie staat in voor alle functionaliteit die toegankelijk is voor alle gebruikers en die geen authorizatie vereist. Deze container communiceert met de \textbf{Database} om alle vereiste statistieken uit de opdracht te voorzien, waaronder het genereren van de league tables, het oplijsten van bepaalde fixtures, het berekenen van de beste teams en het berekenen van statistieken omtrent een team of fixture. Deze service is eveneens verantwoordelijk voor het voorzien van weerdata voor toekomstige wedstrijden en interageert dus met de OpenWeatherMap en Positionstack API.
\subsection{CRUD}
De \textbf{CRUD} service staat in voor alle functionaliteit van de API die niet voor alle gebruikers toegankelijk is. Requests hiernaar moeten geauthoriseerd worden door de \textbf{Auth} service. Zoals de naam aangeeft is deze service dan ook voornamelijk verantwoordelijk voor de create, read, update en delete operaties op de verschillende entiteiten in de \textbf{Database}. Het grootste deel van deze operaties is enkel toegestaan voor admins en superadmins, maar zoals de opdracht aangeeft moeten teamleden bijvoorbeeld ook toegang krijgen tot hun clubinformatie en scores. Eveneens zijn sommige readoperaties ook toegestaan voor alle gebruikers indien deze enkel publiek toegankelijke data opvragen. Net zoals bij alle API functionaliteit worden deze operaties sterk gecontroleerd op inconsistenties om interne databasefouten te vermijden.
\subsection{Database}
De \textbf{Database} container is een PostgreSQL server waarmee andere containers kunnen communiceren via poort 5432. Dit gebeurt langs hun kant via SQLAlchemy. De database is geïnitialiseerd met alle voorziene data plus vier gebruikers om te testen. Een groot deel van de design van de database werd bepaald door de structuur van deze voorziene data. Buiten de 5 entiteiten uit de opdracht, bevat de database ook nog een tabel voor de divisies. Seizoenen werden hierin niet opgenomen maar worden afgeleid uit de de matchdata om inconsistenties te vermijden. Verschillende constraints zijn aanwezig op de tabellen om de integriteit van de database te behouden.

\subsection{Frontend}
De \textbf{Frontend} service is een Flask applicatie die voor de gebruiker ervan communiceert met de achterliggende API. Deze service heeft dus geen speciale interne connecties met bv.\ de database en zou evengoed extern kunnen opereren of geschreven zijn door een gebruiker zelf. De \textbf{Frontend} voorziet een GUI voor alle API operaties, gecombineerd in een overzichtelijke website. Zo wordt de token-based login vertaald naar een session-based login en worden create, update en delete requests omgezet in HTML forms.
Voor alle vereiste functionaliteit uit de opdracht is een pagina voorzien.

\section{API}

\end{document}
